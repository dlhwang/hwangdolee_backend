plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.dollee.bank'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_23
	targetCompatibility = JavaVersion.VERSION_23
}

allprojects {
	repositories {
		mavenCentral()
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	sourceCompatibility = '23'

	dependencies {
		/* spring boot */
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//		//implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

		// Querydsl jpa
		annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta") // QClass 자동 생성
		annotationProcessor("jakarta.persistence:jakarta.persistence-api") // JPA 애노테이션 지원
		annotationProcessor("jakarta.annotation:jakarta.annotation-api") // 애노테이션 처리 지원

		// Springdoc OpenAPI
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.1'

		/* H2 Database*/
		runtimeOnly('com.h2database:h2')

		/* lombok*/
		compileOnly 'org.projectlombok:lombok:1.18.30'
		annotationProcessor 'org.projectlombok:lombok:1.18.30'
		testImplementation 'org.projectlombok:lombok:1.18.30'
		testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

		/* ULID */
		implementation 'de.huxhorn.sulky:de.huxhorn.sulky.ulid:8.3.0'

		/* Test */
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'

		repositories {
			mavenCentral()
		}
	}

	tasks.named('test') {
		useJUnitPlatform()
	}


	def generatedDir = 'src/main/generated'
	sourceSets {
		main.java.srcDirs += [generatedDir]
	}

	compileJava.doFirst {
		delete file("${generatedDir}/com")
		ant.echo(message: "compileJava delete files successully.")
	}

	tasks.compileJava {
		options.generatedSourceOutputDirectory = file(generatedDir)
	}

	tasks.clean {
		delete file(generatedDir)
	}

	// 테스트 결과 로깅 (선택)
	test {
		testLogging {
			events "passed", "skipped", "failed"
		}
	}

}

// 모든 서브모듈 테스트를 한 번에 실행하는 custom task
tasks.register('fullTest') {
	group = 'verification'
	description = 'Runs all tests in all subprojects'
	dependsOn subprojects.collect { it.tasks.matching { task -> task.name == 'test' } }
}

